from exploitation_auto_pix_orga import *
import io

test_bibliotheque = True
test_pdf = True

try : 
    import pandas as pd
except:
    print("!!! Bibliothèque pandas absente. Installez la bibliothèque pandas. !!!")
    test_bibliotheque = False

try : 
    from xhtml2pdf import pisa
except:
    print("!!! Bibliothèque xhtml2pdf absente. Pas de sortie pdf possible. Sortie en html !!!")
    test_pdf = False

def formatageA3portrait(taille_police=12):
    taille_police2 = str(taille_police + 2)
    taille_police4 = str(taille_police + 4)
    taille_police = str(taille_police)
    # Format A3 842 x 1 191 px
    formatageA3portrait = '<style type="text/css">'\
    ' @page {@frame content_frame {left: 28pt;width: 786pt;top: 28pt;height: 1135pt;-pdf-frame-border: 1;}'\
    ' size: A3 portrait}'\
    ' h1 {font-size: '+taille_police4+'px}'\
    ' h2 {font-size: '+taille_police2+'px}'\
    ' h1, h2, h3 {margin-bottom: 0;padding-bottom: 0;}'\
    ' body,p,h3 {font-size: '+taille_police+'px}'\
    ' table{ font-size: '+taille_police+'px ;font-family: sans-serif; border-collapse: collapse;  }'\
    ' td, th{border: 1px solid #ddd; padding: 3px;}'\
    ' th{text-align: left;  background-color: #1e7375;  color: white;}'\
    ' tr{padding:1px}'\
    ' tr:nth-child(even){background-color: #f2f2f2;}'\
    ' a{text-decoration:none; color:black; }'\
    ' </style>'
    return formatageA3portrait


def liste_emargements_html(session_detail, candidats,formatage,code_acces=False):
    texte_HTML=""    
    if session_detail.iloc[0]['Status'] != 'created':
        return texte_HTML

    session_id = session_detail.iloc[0]['Id Session']

   
    
    texte_HTML += "<h2>PIX - Feuille d'émargements</h2>"
    if code_acces :
        texte_HTML += session_detail.loc[:,['Date','Heure','Salle','Surveillants' ]].to_html(index=False)
        texte_HTML += session_detail.loc[:,['Id Session',"Code d'accès",'Code non certifiables','Signatures']].to_html(index=False)

    else :
        texte_HTML += session_detail.loc[:,['Id Session','Date','Heure','Salle' ]].to_html(index=False)
        texte_HTML += session_detail.loc[:,['Nombre de candidats inscrits','Nombre de présents','Surveillants','Signatures']].to_html(index=False)
    
        
    texte_HTML += '<p>Participants</p>'
    candidats_session=candidats[candidats[session_id].notna()]
    candidats_session=candidats_session.loc[:,['Classe','Nom du Participant','Prénom du Participant','Date de naissance','Temps majoré (O/N)','Signature','Écran de fin de test vu (cocher)']]
    texte_HTML += candidats_session.to_html(index=False)
    texte_HTML += '<div style="page-break-before:always">&nbsp;</div>'
    texte_HTML = texte_HTML.replace("<th>Classe</th>","<th style='width:80px;'>Classe</th>")
    texte_HTML = texte_HTML.replace("<th>Date de naissance</th>","<th style='width:80px;'>Date de naissance</th>")
    texte_HTML = texte_HTML.replace("<th>Temps majoré (O/N)</th>","<th style='width:50px;'>Temps majoré (O/N)</th>")
    texte_HTML = texte_HTML.replace("<th>Signature</th>","<th style='width:100px;'>Signature</th>")
    texte_HTML = texte_HTML.replace("<th>Écran de fin de test vu (cocher)</th>","<th style='width:60px;'>Écran de fin de test vu (cocher)</th>")

    return texte_HTML

def page_de_garde_html(session_detail,consignes_html):
    texte_HTML=""
    if session_detail.iloc[0]['Status'] != 'created':
        return texte_HTML
    

    
    texte_HTML += session_detail.loc[:,['Date','Heure','Salle','Surveillants' ]].to_html(index=False)
    texte_HTML += session_detail.loc[:,['Id Session',"Code d'accès",'Code non certifiables','Nombre de candidats inscrits']].to_html(index=False)
    texte_HTML += session_detail.loc[:,['Classes concernées','Observations']].to_html(index=False)
    texte_HTML += consignes_html
    texte_HTML += '<div style="page-break-before:always">&nbsp;</div>'
    
    return texte_HTML


def sortie_dossier(sessions_detail,candidats,code_non_certifiables,sortie_html,sortie_pdf,formatage = 'A3',page_garde=True,multidoc=False):
    
    # Ajout de colonnes non informatives, uniquement pour la présentation
    sessions_detail=sessions_detail.assign(Signatures=".",code_non_certifiables=code_non_certifiables,presents=".")
    colonnes = {'code_non_certifiables':'Code non certifiables','presents':'Nombre de présents'}
    sessions_detail.rename(columns = colonnes, inplace = True)  
    candidats=candidats.assign(Tempsmajore = ".", Signature = ".",Coche=".")
    colonnes = {'Tempsmajore':'Temps majoré (O/N)','Coche':'Écran de fin de test vu (cocher)'}
    candidats.rename(columns = colonnes, inplace = True)        
    
    # Lecture du fichier contenant les consignes
    try :
        fichier_consignes = open("consignessurveillants.html", "r", encoding='utf8')
        consignes_html = fichier_consignes.read()
        fichier_consignes.close() 
    except :
        consignes_html = "Retrouvez les consignes dans le dossier"
    
    if formatage == 'A3':
        texte_HTML=formatageA3portrait(12)
    else :
        texte_HTML=formatageA4portrait(9)
        
    for session_id in sessions_detail['Id Session'] :
        session_detail = sessions_detail[sessions_detail['Id Session']==session_id]
        if page_garde :
            texte_HTML +=page_de_garde_html(session_detail,consignes_html)
            code_acces = False
        else :
            code_acces = True
        texte_HTML += liste_emargements_html(session_detail,candidats,formatage,code_acces)
        


    repertoire = "Documents-Certif-Auto"
    os.makedirs(repertoire, exist_ok=True)       
        
    if sortie_pdf :
        fichier_PDF = open( repertoire+"/Liste d'émargements.pdf", "w+b")
        pisa.CreatePDF(texte_HTML,fichier_PDF)
        fichier_PDF.close()
    

            
if __name__ == "__main__":
    sortie_html=False
    sortie_pdf=True
    sortie_csv=False
    Code_acces =False
    username,password = donnees_perso()
    
    code_non_certifiables = input('Code pour les non certifiables ? ')
    code_non_certifiables = code_non_certifiables.upper()

    formatage = input ('Format (A4/A3) par défaut : A3 ? ')
    if formatage in ['A4','a4','4']:
        formatage = 'A4'
        print('!!! Attention la page de garde doit avoir un texte court !!!')
    else :
        formatage ='A3'
        
    page_garde = input("Création d'une page de garde par session (o/n) par défaut : Oui ? ")
    if page_garde in ['Non','NON','non','N','n']:
        page_garde = False
    else :
        page_garde =True   

    token_orga,user_id_orga=identification_orga(username,password)
    organisation_id=choix_organisation(token_orga,user_id_orga)

    token_certif,user_id_certif=identification_certif(username,password)
    centre_id=choix_centre(token_certif)

    del username
    del password
    


    eleves_detail =liste_eleves_detail(token_orga,organisation_id)
    eleves = liste_eleves(eleves_detail)

    sessions = liste_sessions(token_certif,centre_id)
    candidats = liste_candidats(token_certif,centre_id,sessions)
    sessions_detail = liste_sessions_detail(sessions,candidats,'certif',sortie_html,sortie_pdf,sortie_csv)
    
    sortie_dossier(sessions_detail,candidats,code_non_certifiables,sortie_html,sortie_pdf,formatage,page_garde)

